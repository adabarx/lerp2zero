
#[derive(Debug, PartialEq, Clone, Copy)]
struct Easing {
    dir: EaseDirection,
    shape: EaseShape,
}

#[derive(Enum, Debug, PartialEq, Clone, Copy)]
enum EaseDirection {
    In,
    Out,
}

#[derive(Enum, Debug, PartialEq, Clone, Copy)]
enum EaseShape {
    Sine,
    // Circle, //weird behaivor popping up because of this. NaN issue?
    Exponent,
    OutBack,
    Elastic,
}

impl Easing {
    fn new(dir: EaseDirection, shape: EaseShape) -> Self {
        Self { dir, shape }
    }

    fn calc(&self, t: f32) -> f32 {
        if t == 0.0 {
            return t;
        } else if t == 1.0 {
            return t;
        }
        use f32::consts::{PI, TAU};
        use EaseDirection::*;
        use EaseShape::*;
        match self.dir {
            In => match self.shape {
                Sine => 1.0 - f32::cos((t * PI) / 2.0),
                // Circle => 1.0 - f32::sqrt(1.0 - t.powi(2)),
                Exponent => 2_f32.powf(10.0 * t - 10.0),
                OutBack => 1.70158 * t * t * t - 2.70158 * t * t,
                Elastic => {
                    let tau_3 = TAU / 3.0;
                    -2_f32.powf(10.0 * t - 10.0) * f32::sin((t * 10.0 - 10.75) * tau_3)
                }
            },
            Out => match self.shape {
                Sine => f32::sin((t * PI) / 2.0),
                // Circle => f32::sqrt(1.0 - (1.0 - t).powi(2)),
                Exponent => 1.0 - 2_f32.powf(-10.0 * t),
                _ => {
                    let out = Easing::new(EaseDirection::In, self.shape);
                    1.0 - out.calc(1.0 - t)
                }
            },
        }
    }
}
